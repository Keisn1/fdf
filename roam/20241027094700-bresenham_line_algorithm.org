:PROPERTIES:
:ID:       e5b5f88a-e6c3-41a1-98be-b5a6d08563fe
:END:
#+title: bresenham line algorithm
#+date: [2024-10-27 Sun 09:47]
#+startup: overview latexpreview

https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm

* method: first octant version (going down to the right) - slope between 0 and 1
- given real coordinates:  \(x_0 <= x_1 \) and \(y_0 <= y_1 \)
  - only one pixel per column
  - there may be more pixels in a row
- y is choosen corresponding to the pixel center that is closest to \((x_{real}, y_{real})\)
  - on successive columns, y can remain the same or increase by 1
    \[ y - y_0 = \frac{y_1 - y_0}{x_1 - x_0} (x - x_0) = \frac{\Delta y}{\Delta x} (x - x_0)\]

- rewrite to \( f(x, y) = 0 = \Delta y \cdot x - \Delta x \cdot y + \Delta x \cdot b \)
  - represents a line and splits the plane into two halfs (greater and smaller 0)
  - this form only involves integers

- starting point \( (x_0, y_0) \) is on the line
- now the problem is which point to choose next:\( (x_0 + 1, y_0) \) or \((x_0 + 1, y_0 + 1)\)
- evaluating \( f(x_0 + 1, y_0 + 1/2) \) gives answer about the location of the midpoint with respect to the ideal line
  - if it is positive, the line lies beneath the midpoint
  - if is negative, the line lies above the midpoint
  - therefore the correct pixel can be choosen

** integer only arithmetic

https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm#Algorithm_for_integer_arithmetic

- define difference:
\(\Delta D_i = f(x_{i+1}, y_{i}+\frac{1}{2}) - f(x_0, y_0)\)
- simplify
  \(D_0 = \Delta y - \frac{1}{2} \Delta x\)

** algorithm first octant
#+begin_src python :results output
plotLine(x0, y0, x1, y1)
    dx = x1 - x0
    dy = y1 - y0
    D = 2*dy - dx
    y = y0

    for x from x0 to x1
        plot(x, y)
        if D > 0
            y = y + 1
            D = D - 2*dx
        end if
        D = D + 2*dy
#+end_src
* algorithm
:PROPERTIES:
:ID:       33827d84-dd96-48a0-9842-87e6feb66dfd
:END:
** pseudo-all-octant
[[pdf:~/workspace/fdf/BresenhamRasterizingCurves.pdf::1++0.00][BresenhamRasterizingCurves.pdf: Page 1]]

#+begin_src python
plotLine(x0, y0, x1, y1)
    dx = abs(x1 - x0)
    sx = x0 < x1 ? 1 : -1
    dy = -abs(y1 - y0)
    sy = y0 < y1 ? 1 : -1
    error = dx + dy

    while true
        plot(x0, y0)
        if x0 == x1 && y0 == y1 break
        e2 = 2 * error
        if e2 >= dy
            error = error + dy
            x0 = x0 + sx
        end if
        if e2 <= dx
            error = error + dx
            y0 = y0 + sy
        end if
    end while
#+end_src
*** c-implementation
https://zingl.github.io/bresenham.html
#+begin_src c
void plotLine(int x0, int y0, int x1, int y1)
{
    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
    int err = dx+dy, e2;                                  /* error value e_xy */

    while (true) {                                                        /* loop */
        setPixel(x0,y0);
        e2 = 2*err;
        if (e2 >= dy) {                                       /* e_xy+e_x > 0 */
            if (x0 == x1) break;
            err += dy; x0 += sx;
        }
        if (e2 <= dx) {                                       /* e_xy+e_y < 0 */
            if (y0 == y1) break;
            err += dx; y0 += sy;
        }
    }
}
#+end_src
