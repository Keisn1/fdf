:PROPERTIES:
:ID:       ac3d9642-735e-4e01-ad59-4bd09868a8f1
:END:
#+title: image api usage
#+date: [2024-10-23 Wed 11:54]
#+startup: overview

* define data type
#+begin_src c
typedef struct s_data{
	void *img; 				/* pointer to image in X-Server */
	char *addr;				/* address of image data */
	int bpp;				/* bits per pixel */
	int size_line;
	int endian;

} t_data;
#+end_src
* Create new image
#+begin_src c
t_data data;
data.img = mlx_new_image(mlx_ptr, 200, 300);
#+end_src
* Get the address of the new image
#+begin_src c
data.addr = mlx_get_data_addr(data.img, &data.bpp, &data.size_line, &data.endian);
#+end_src
* How to draw pixels in images
** calculate offset
- size_line != window_width
- memory offset is calculated using size_line
#+begin_src c
int x = 20;
int y = 30;
/* bpp/8 gives you the number of bytes you need to jump, to jump a whole pixel */
int offset = (y * data.size_line + x * (data.bpp/ 8));
#+end_src
** write color
*** my first try
#+begin_src c
int x = 20;
while (x < 180) {
        int y = 30;
        while (y < 260) {
            int offset = (y * data.size_line + x * (data.bpp/ 8));
            int* pixel = (int*)(data.addr + offset);
            ,*pixel = mlx_get_color_value(mlx_ptr, rgb(255, 255, 255));
            y++;
        }
        x++;
}
#+end_src
*** put into a function
#+begin_src c
unsigned int rgb(int red, int green, int blue) {
	unsigned int color = red << 16;
	color += (green<<8);
	color += blue;
	return color;
}

void img_put_pixel(void *mlx_ptr, t_data *data, int x, int y) {
	int offset = y * data->size_line + x * (data->bpp/ 8);
	,*(unsigned int*)(data->addr + offset) = mlx_get_color_value(mlx_ptr, rgb(255, 255, 255));
}
#+end_src
*** TODO avoid screen tearing - temporary images
*** pushing image


* STORING COLOR INSIDE IMAGES
Depending on the display, the number of bits used to store a pixel color
can change. The user usually represents a color in RGB mode,  using  one
byte  for each component (see mlx_pixel_put manual). This must be trans‐
lated to fit the bits_per_pixel requirement of the image, and  make  the
color  understandable  to  the  X-Server.   That  is  the purpose of the
mlx_get_color_value () function. It takes a standard RGB  color  parame‐
ter,  and  returns an unsigned int value.  The bits_per_pixel least sig‐
nificant bits of this value can be stored in the image.

Keep in mind that the least significant bits position depends on the lo‐
cal computer's endian. If the endian of the image (in fact the endian of
the X-Server's computer) differs from the local endian, then  the  value
should be transformed before being used.
